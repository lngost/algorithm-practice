insertion-sort

***************************************************************************************
input: A = {a1, a2, a3, ..., an}; (unsorted)
output: A = {a1', a2', a3', ..., an'}; (which a1' <= a2' <= a3' <= ... <= an')
assume:
    * Index of the first element is 1
    * Index of the last element is A.length
INSERTION-SORT(A)
    for j = 2 to A.length
        key = A[j]
        i = j - 1
        while i > 0 and A[i] > key
            A[i+1] = A[i]
            i = i - 1
        A[i+1] = key
        

***************************************************************************************
input: A = {a1, a2, a3, ..., an}; (unsorted)
output: A = {a1', a2', a3', ..., an'}; (which a1' >= a2' >= a3' >= ... >= an')
assume:
    * Index of the first element is 1
    * Index of the last element is A.length
INSERTION-SORT(A)
    for j = 2 to A.length
        key = A[j]
        i = j - 1
        while i > 0 and A[i] < key
            A[i+1] = A[i]
            i = i - 1
        A[i+1] = key


***************************************************************************************
time complexity

The big O notation: O(n^2)

(a) best case
INSERTION-SORT(A)                           cost per exec       count
    for j = 2 to A.length                   c1                  n
        key = A[j]                          c2                  n-1
        i = j - 1                           c3                  n-1
        while i > 0 and A[i] > key          c4                  n-1
            A[i+1] = A[i]                   c5                  0
            i = i - 1                       c6                  0
        A[i+1] = key                        c7                  n-1

T(n) = c1*n
    + c2*(n-1)
    + c3*(n-1)
    + c4*(n-1)
    + c7*(n-1)
result: Θ(n)


(b) worst case
INSERTION-SORT(A)                           cost per exec       count
    for j = 2 to A.length                   c1                  n
        key = A[j]                          c2                  n-1
        i = j - 1                           c3                  n-1
        while i > 0 and A[i] > key          c4                  n*(n+1)/2 - 1
            A[i+1] = A[i]                   c5                  n*(n-1)/2
            i = i - 1                       c6                  n*(n-1)/2
        A[i+1] = key                        c7                  n-1

T(n) = c1*n
    + c2*(n-1)
    + c3*(n-1)
    + c4*(n*(n+1)/2 - 1)
    + c5*(n*(n-1)/2)
    + c6*(n*(n-1)/2)
    + c7*(n-1)
result: Θ(n^2)

